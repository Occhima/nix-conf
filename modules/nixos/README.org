#+TITLE: NixOS Modules
#+AUTHOR: occhima
#+DESCRIPTION: System-level modules for NixOS configuration
#+OPTIONS: toc:3

* Overview

This directory contains reusable NixOS modules that can be imported into your host configurations. These modules follow functional programming principles and provide a clear interface with options and implementation separated.

Some modules are inspired by [[https://github.com/isabelroses/dotfiles/blob/main/modules/nixos][isabelroses/dotfiles]], the profiles logic were basically a copy paste + addaptations of the repo.

* Module Structure

Each module follows a standard structure:

#+begin_src nix
{ config, lib, ... }:

let
  cfg = config.modules.<module-name>;
in
{
  options.modules.<module-name> = {
    enable = lib.mkEnableOption "Enable module name";
    # Other options...
  };

  config = lib.mkIf cfg.enable {
    # Implementation when enabled
  };
}
#+end_src

* Available Modules

** Accounts

The accounts module provides user account management with home-manager integration:

- *accounts.nix* - Main module that manages users and integrates Home Manager
- *users/* - Individual user definitions

*** Usage

To use the accounts module in your configuration:

#+begin_src nix
{ ... }:
{
  modules.accounts = {
    enable = true;
    enabledUsers = [ "occhima" "root" ];
    enableHomeManager = true;  # Set to false to disable home-manager integration
  };
}
#+end_src

** Hardware

Hardware-specific configurations:

- *audio.nix* - Audio configuration with PipeWire/PulseAudio
- *bluetooth.nix* - Bluetooth support
- *cpu/* - CPU-specific optimizations
- *gpu/* - Graphics drivers (NVIDIA, Intel, AMD)
- *monitors.nix* - Monitor configuration
- *ssd.nix* - SSD optimizations
- *yubikey.nix* - YubiKey support

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.hardware = {
    audio.enable = true;
    bluetooth.enable = true;
    gpu.nvidia.enable = true;  # For NVIDIA GPUs
    ssd.enable = true;
  };
}
#+end_src

** Network

Networking configurations:

- *blocker.nix* - Ad and tracker blocking
- *networkmanager.nix* - NetworkManager configuration
- *wireless.nix* - Wireless networking

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.network = {
    networkmanager.enable = true;
    wireless.enable = true;
    blocker = {
      enable = true;
      blockLists = [ "StevenBlack" "someOtherList" ];
    };
  };
}
#+end_src

** Editor

Text editor configurations:

- *emacs.nix* - Emacs configuration
- *neovim.nix* - Neovim configuration

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.editor = {
    neovim.enable = true;
    emacs = {
      enable = true;
      doom.enable = true;  # Enable Doom Emacs
    };
  };
}
#+end_src

** Secrets

Secret management:

- *agenix.nix* - Integration with agenix
- *agenix-rekey.nix* - Support for key rotation
- *ragenix.nix* - Enhanced agenix functionality
- *sops.nix* - Alternative using sops-nix

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.secrets = {
    agenix = {
      enable = true;
      secrets = {
        example-secret = {
          file = ../secrets/vault/example.age;
          owner = "occhima";
          group = "users";
          mode = "0400";
        };
      };
    };
  };
}
#+end_src

** Security

Security-related configurations:

- *clamav.nix* - Antivirus scanning
- *kernel.nix* - Kernel hardening options

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.security = {
    kernel = {
      enable = true;
      sysctl = {
        "kernel.unprivileged_bpf_disabled" = 1;
        # Other sysctl options...
      };
    };
    clamav.enable = true;
  };
}
#+end_src

** Services

System services:

- *systemd.nix* - Systemd configuration and optimizations
- *xserver.nix* - X server configuration

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.services = {
    systemd = {
      enable = true;
      optimizeServices = true;
    };
  };
}
#+end_src

** System

Core system settings:

- *boot/* - Boot loader configurations
- *display/* - Display server configurations
- *file-system/* - File system configurations and persistence

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.system = {
    boot = {
      generic.enable = true;
      loader.systemd.enable = true;
    };
    file-system = {
      impermanence = {
        enable = true;
        persistentDirectories = [
          "/var/log"
          "/var/lib/bluetooth"
          # Other directories to persist
        ];
      };
    };
  };
}
#+end_src

** Virtualization

Virtualization support:

- *distrobox.nix* - Distrobox container management
- *docker.nix* - Docker configuration
- *iso.nix* - ISO image creation
- *podman.nix* - Podman container runtime
- *qemu.nix* - QEMU/KVM virtualization
- *vm.nix* - Virtual machine configuration

*** Usage Example

#+begin_src nix
{ ... }:
{
  modules.virtualization = {
    docker.enable = true;
    qemu = {
      enable = true;
      spiceSupport = true;
    };
  };
}
#+end_src

* Module Options

Each module exposes a set of options that can be configured. The basic pattern is:

#+begin_src nix
modules.<category>.<module>.enable = true;
#+end_src

For more detailed options, refer to the documentation in each module file.

* Creating New Modules

To create a new module:

1. Create a new .nix file in the appropriate category directory
2. Follow the standard module structure (options/config pattern)
3. Import the module in the category's default.nix (if it exists)
4. Add documentation for the module in this README

Example module template:

#+begin_src nix
{ config, lib, ... }:

with lib;

let
  cfg = config.modules.category.module-name;
in
{
  options.modules.category.module-name = {
    enable = mkEnableOption "Description of the module";

    option1 = mkOption {
      type = types.str;
      default = "default value";
      description = "Description of option1";
    };

    # More options...
  };

  config = mkIf cfg.enable {
    # Implementation when the module is enabled
  };
}
#+end_src
